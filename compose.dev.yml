services:
  web:
    build: .
    ports:
      - "8006:8000"
    env_file:
      - .env
    # command: sh -c "./entrypoint.dev.sh"
    restart: always
    depends_on:
      db:
        condition: service_healthy
    develop:
      # Create a `watch` configuration to update the app
      #
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment
          ignore:
            - .venv/

        # Rebuild the image on changes to the `pyproject.toml`
        - action: rebuild
          path: ./pyproject.toml

  db:
    image: postgres:16
    env_file:
      - .env
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  postgres_data: